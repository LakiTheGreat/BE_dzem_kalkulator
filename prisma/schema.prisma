

enum TransactionStatus {
  CONSUMED
  SOLD
  GIVEN_AWAY
  PROMOTION
  OTHER
}

enum BouquetTransactionEnum {
  SOLD
  GIVEN_AWAY
  PROMOTION
  OTHER
}


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      Int      @id @default(autoincrement())
   Fruits  Fruit[]
  Cups    Cup[]
  CupCosts CupCost[]
  CupValues CupValue[]
  ConfigConstants ConfigConstant[]
  Orders  Order[]

  Inventory Inventory[]

  Transaction Transaction[]

  BouquetTransaction BouquetTransaction[]

  TomatoCup TomatoCup[]

  TomatoTransaction TomatoOrder[]

  TomatoOrderTransaction TomatoOrderTransaction[]
}

model Fruit {
  id        Int     @id @default(autoincrement())
  label     String
  isDeleted Boolean @default(false)
  Order     Order[]

  userId Int @default(1)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  Inventory Inventory[]

  Transaction Transaction[]
}
 

model Cup {
  id           Int       @id @default(autoincrement())
  label        String
  isDeleted    Boolean   @default(false)
  costId       Int       
  valueId      Int       
  cost         CupCost   @relation("CupToCost", fields: [costId], references: [id], onDelete: Restrict)
  sellingPrice CupValue  @relation("CupToValue", fields: [valueId], references: [id], onDelete: Restrict)

  userId Int @default(1)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CupCost {
  id        Int     @id @default(autoincrement())
  value     Int
  label     String
  cup       Cup[]   @relation("CupToCost")
  isDeleted Boolean @default(false)

  userId Int @default(1)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model CupValue {
  id        Int     @id @default(autoincrement())
  value     Int
  label     String
  cup       Cup[]   @relation("CupToValue")
  isDeleted Boolean @default(false)

  userId Int @default(1)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 

model ConfigConstant {
  id          Int     @id @default(autoincrement())
  value       Int
  label       String
  description String  @default("")
  isDeleted   Boolean @default(false)

  userId Int @default(1)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
model Order {
  id                  Int       @id @default(autoincrement())
  orderName           String    @default("")
  orderTypeId         Int
  orderType           Fruit     @relation(fields: [orderTypeId], references: [id], onDelete: Restrict)
  createdAt           DateTime  @default(now())
  isDeleted           Boolean   @default(false)
  baseFruitIsFree     Boolean   @default(false)
  cups                Json[]
  fruits              Json[]
  otherExpensesMargin Int       @default(25)

  userId Int @default(1)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Inventory {
  orderTypeId Int   @id
  cupData     Json  

  // Relations
  orderType Fruit @relation(fields: [orderTypeId], references: [id], onDelete: Cascade)
  userId    Int   @default(1)
  user      User  @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model Transaction {
  id           Int               @id @default(autoincrement())
  orderTypeId  Int
  orderType    Fruit             @relation(fields: [orderTypeId], references: [id], onDelete: Cascade)
  note String @default("")

  cups         Json[]            
  status       TransactionStatus

  userId       Int               @default(1)
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  isDeleted           Boolean   @default(false)
  createdAt    DateTime          @default(now())
}

model BouquetTransaction {
  id           Int               @id @default(autoincrement())
  note String @default("")
  userId       Int               @default(1)
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)

 status       BouquetTransactionEnum @default(SOLD)
 totalExpense Int
 income Int
 profit Int
 profitMargin Int

  isDeleted           Boolean   @default(false)
  createdAt    DateTime          @default(now())
}

model TomatoCup {
  id         Int      @id @default(autoincrement())
  label      String
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())

  userId     Int      @default(1)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  TomatoTransaction TomatoOrder[]

  TomatoOrderTransaction TomatoOrderTransaction[]
}

model TomatoOrder {
  id            Int      @id @default(autoincrement())
  cupTypeId     Int
  cupType       TomatoCup @relation(fields: [cupTypeId], references: [id], onDelete: Cascade)
  
  totalExpenses Int
  numOfCups         Int

  
  userId        Int       @default(1)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  isDeleted     Boolean   @default(false)
  createdAt     DateTime  @default(now())
}

model TomatoOrderTransaction {
  id               Int       @id @default(autoincrement())
  note             String   
  status           TransactionStatus
  cupTypeId        Int
  numOfCups        Int
  pricePerCup      Int

  isDeleted        Boolean   @default(false)
  createdAt        DateTime  @default(now())

  userId           Int @default(1)
  user             User      @relation(fields: [userId], references: [id])

  cupType          TomatoCup   @relation(fields: [cupTypeId], references: [id])
}









